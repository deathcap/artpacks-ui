// Generated by CoffeeScript 1.7.0
(function() {
  var APSelector;

  module.exports = function(artPacks) {
    return new APSelector(artPacks);
  };

  APSelector = (function() {
    function APSelector(artPacks) {
      this.artPacks = artPacks;
      this.container = document.createElement('div');
      this.draggingIndex = void 0;
      this.enable();
    }

    APSelector.prototype.enable = function() {
      this.refresh();
      this.artPacks.on('refresh', this.refresh.bind(this));
      document.addEventListener('dragover', this.onDocDragOver.bind(this));
      return document.addEventListener('drop', this.onDocDrop.bind(this));
    };

    APSelector.prototype.disable = function() {};

    APSelector.prototype.refresh = function() {
      var i, logo, node, pack, _i, _len, _ref, _results;
      while (this.container.firstChild) {
        this.container.removeChild(this.container.firstChild);
      }
      _ref = this.artPacks.packs;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        pack = _ref[i];
        if (pack == null) {
          continue;
        }
        node = document.createElement('div');
        node.setAttribute('draggable', 'true');
        node.setAttribute('style', 'border: 1px solid black; -webkit-user-select: none; -moz-user-select: none; cursor: move; padding: 10px;');
        node.addEventListener('dragstart', this.onDragStart.bind(this, node, i), false);
        node.addEventListener('dragend', this.onDragEnd.bind(this, node, i), false);
        node.addEventListener('dragenter', this.onDragEnter.bind(this, node, i), false);
        node.addEventListener('dragleave', this.onDragLeave.bind(this, node, i), false);
        node.addEventListener('dragover', this.onDragOver.bind(this, node, i), false);
        node.addEventListener('drop', this.onDrop.bind(this, node, i), false);
        logo = new Image();
        logo.src = pack.getPackLogo();
        logo.width = logo.height = 128;
        node.appendChild(logo);
        node.appendChild(document.createTextNode(pack.getDescription()));
        _results.push(this.container.appendChild(node));
      }
      return _results;
    };

    APSelector.prototype.onDragStart = function(node, i, ev) {
      this.draggingIndex = i;
      node.style.opacity = '0.4';
      ev.dataTransfer.effectAllowed = 'move';
      return ev.dataTransfer.setData('text/plain', '' + i);
    };

    APSelector.prototype.onDragEnd = function(node, i) {
      this.draggingIndex = void 0;
      return node.style.opacity = '';
    };

    APSelector.prototype.onDragEnter = function(node, i) {
      if (i === this.draggingIndex) {
        return;
      }
      return node.style.border = '1px dashed black';
    };

    APSelector.prototype.onDragLeave = function(node, i) {
      if (i === this.draggingIndex) {
        return;
      }
      return node.style.border = '1px solid black';
    };

    APSelector.prototype.onDragOver = function(node, i, ev) {
      ev.preventDefault();
      return ev.dataTransfer.dropEffect = 'move';
    };

    APSelector.prototype.onDrop = function(node, i, ev) {
      ev.stopPropagation();
      ev.preventDefault();
      if (ev.dataTransfer.files.length !== 0) {
        return this.addDroppedFiles(ev.dataTransfer.files, i);
      } else {
        this.draggingIndex = +ev.dataTransfer.getData('text/plain');
        return this.artPacks.swap(this.draggingIndex, i);
      }
    };

    APSelector.prototype.addDroppedFiles = function(files, at) {
      var file, reader, _i, _len, _results;
      if (at == null) {
        at = void 0;
      }
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        reader = new FileReader();
        reader.addEventListener('load', (function(_this) {
          return function(readEvent) {
            if (readEvent.total !== readEvent.loaded) {
              return;
            }
            return _this.artPacks.addPack(readEvent.currentTarget.result, file.name);
          };
        })(this));
        _results.push(reader.readAsArrayBuffer(file));
      }
      return _results;
    };

    APSelector.prototype.onDocDragOver = function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      return ev.dataTransfer.dropEffect = 'move';
    };

    APSelector.prototype.onDocDrop = function(ev) {
      if (ev.dataTransfer.files.length !== 0) {
        ev.stopPropagation();
        ev.preventDefault();
        return this.addDroppedFiles(ev.dataTransfer.files);
      }
    };

    return APSelector;

  })();

}).call(this);
